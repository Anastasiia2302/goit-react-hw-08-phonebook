{"version":3,"file":"static/js/439.497bd6e7.chunk.js","mappings":"uQAkBMA,GAASC,EAAAA,EAAAA,IAAe,aAAc,GAEtCC,EAASC,EAAAA,KAAaC,MAAM,CAChCC,KAAMF,EAAAA,KAAaG,IAAI,GAAGC,IAAI,IAAIC,WAClCC,MAAON,EAAAA,KAAaG,IAAI,GAAGE,aAGvBE,EAAgB,CACpBC,GAAI,GACJN,KAAM,GACNI,MAAO,IAGM,SAASG,IACtB,IAAMC,GAAWC,EAAAA,EAAAA,MAajB,OACE,SAAC,KAAD,CACEJ,cAAeA,EACfK,SAbiB,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UACxBC,EAAa,CACjBP,GAAI,KAAOX,IACXK,KAAMW,EAAOX,KACbI,MAAOO,EAAOP,OAEhBI,GAASM,EAAAA,EAAAA,IAAWD,IACpBD,GACD,EAMGG,iBAAkBlB,EAHpB,UAKE,UAAC,KAAD,YACE,UAAC,KAAD,YACE,SAAC,KAAD,CAAOmB,QAAQ,OAAf,mBACA,SAAC,KAAD,CAAOhB,KAAK,OAAOiB,KAAK,OAAOX,GAAG,UAClC,SAAC,KAAD,CAAUN,KAAK,OAAOkB,UAAU,YAGlC,UAAC,KAAD,YACE,SAAC,KAAD,CAAOF,QAAQ,QAAf,qBACA,SAAC,KAAD,CAAOhB,KAAK,QAAQiB,KAAK,MAAMX,GAAG,WAClC,SAAC,KAAD,CAAUN,KAAK,QAAQkB,UAAU,YAEnC,SAAC,KAAD,CAAKD,KAAK,SAAV,6BAIP,CCnEM,IAAME,EAAiB,SAAAC,GAAK,OAAIA,EAAMC,SAASC,KAAnB,EAEtBC,EAAgB,SAAAH,GAAK,OAAIA,CAAJ,EAIrBI,EAAqB,SAAAJ,GAAK,OAAIA,EAAMK,QAAQC,MAAlB,ECAxB,SAASC,IACtB,IAAMnB,GAAWC,EAAAA,EAAAA,MACXY,GAAWO,EAAAA,EAAAA,IAAYT,GACvBU,GAASD,EAAAA,EAAAA,IAAYJ,GAU3B,OACE,+BACC,SAAC,KAAD,UARKH,EAASQ,QAAO,SAAAC,GAAO,OACzBA,EAAQ9B,KAAK+B,cAAcC,SAASH,EAAOE,cADlB,IASPE,KAAI,YAA0B,IAAvB3B,EAAsB,EAAtBA,GAAIN,EAAkB,EAAlBA,KAAMI,EAAY,EAAZA,MACjC,OAEE,UAAC,KAAD,YACE,SAAC,KAAD,UAAOJ,KACP,SAAC,KAAD,UAAOI,KACP,SAAC,KAAD,CACEa,KAAK,SACLiB,QAAS,kBAAM1B,GAAS2B,EAAAA,EAAAA,IAAc7B,GAA7B,EAFX,sBAHSA,EAWd,OAIR,CChCc,SAAS8B,IACtB,IAAM5B,GAAWC,EAAAA,EAAAA,MACX4B,GAAYT,EAAAA,EAAAA,IAAYL,GAO9B,OANAe,QAAQC,IAAIF,IAEZG,EAAAA,EAAAA,YAAU,WACRhC,GAASiC,EAAAA,EAAAA,MACV,GAAE,CAACjC,KAGF,iCAEE,SAACD,EAAD,KACA,SAACoB,EAAD,KACA,yBAAMU,GAAa,6BAIxB,C","sources":["components/Phonebook/Phonebook.jsx","redux/contacts/selectors.js","components/Contacts/Contacts.jsx","pages/contacts.js"],"sourcesContent":["import { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { customAlphabet } from 'nanoid';\n\nimport {\n  Btn,\n  ErrorMes,\n  Forma,\n  Input,\n  Label,\n  Wrap,\n} from 'components/PhoneBook.styled';\nimport { useDispatch } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\n\n\n\n\nconst nanoid = customAlphabet('1234567890', 3);\n\nconst schema = Yup.object().shape({\n  name: Yup.string().min(2).max(70).required(),\n  phone: Yup.string().min(4).required(),\n});\n\nconst initialValues = {\n  id: '',\n  name: '',\n  phone: '',\n};\n\nexport default function Phonebook() {\n  const dispatch = useDispatch();\n  \n\n  const handleSubmit = (values, { resetForm }) => {\n    const newContact = {\n      id: 'id' + nanoid(),\n      name: values.name,\n      phone: values.phone,\n    };\n    dispatch(addContact(newContact));\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={handleSubmit}\n      validationSchema={schema}\n    >\n      <Forma>\n        <Wrap>\n          <Label htmlFor=\"name\">Name</Label>\n          <Input name=\"name\" type=\"text\" id=\"name\" />\n          <ErrorMes name=\"name\" component=\"div\"></ErrorMes>\n        </Wrap>\n\n        <Wrap>\n          <Label htmlFor=\"phone\">Number</Label>\n          <Input name=\"phone\" type=\"tel\" id=\"phone\" />\n          <ErrorMes name=\"phone\" component=\"div\"></ErrorMes>\n        </Wrap>\n        <Btn type=\"submit\">Add contact</Btn>\n      </Forma>\n    </Formik>\n  );\n}","export const selectContacts = state => state.contacts.items;\n\nexport const selectLoading = state => state;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectStatusFilter = state => state.filters.status;\n","import { BtnDel, Item, List, Name } from 'components/PhoneBook.styled';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport {selectContacts, selectStatusFilter } from 'redux/contacts/selectors';\n\n\nexport default function ContactList() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectStatusFilter);\n\n  const filterContacts  = () => {\n   \n   return contacts.filter(contact =>\n        contact.name.toLowerCase().includes(filter.toLowerCase())\n      );\n      \n  };\n \n  return (\n    <>\n     <List>\n        {filterContacts().map(({ id, name, phone }) => {\n          return (\n            \n            <Item key={id}>\n              <Name>{name}</Name>\n              <Name>{phone}</Name>\n              <BtnDel\n                type=\"button\"\n                onClick={() => dispatch(deleteContact(id))}\n              >\n                Delete\n              </BtnDel>\n            </Item>\n          );\n        })}\n      </List>\n    </>\n  );\n}","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Phonebook from 'components/Phonebook/Phonebook';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectLoading } from 'redux/contacts/selectors';\nimport ContactList from 'components/Contacts/Contacts';\n\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectLoading);\n  console.log(isLoading)\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      \n      <Phonebook />\n      <ContactList />\n      <div>{isLoading && 'Request in progress...'}</div>\n      \n    </>\n  );\n}\n"],"names":["nanoid","customAlphabet","schema","Yup","shape","name","min","max","required","phone","initialValues","id","Phonebook","dispatch","useDispatch","onSubmit","values","resetForm","newContact","addContact","validationSchema","htmlFor","type","component","selectContacts","state","contacts","items","selectLoading","selectStatusFilter","filters","status","ContactList","useSelector","filter","contact","toLowerCase","includes","map","onClick","deleteContact","Contacts","isLoading","console","log","useEffect","fetchContacts"],"sourceRoot":""}