{"version":3,"file":"static/js/592.763e4f61.chunk.js","mappings":"uQAeMA,GAASC,EAAAA,EAAAA,IAAe,aAAc,GAEtCC,EAASC,EAAAA,KAAaC,MAAM,CAChCC,KAAMF,EAAAA,KAAaG,IAAI,GAAGC,IAAI,IAAIC,WAClCC,OAAQN,EAAAA,KAAaG,IAAI,GAAGE,aAGxBE,EAAgB,CACpBC,GAAI,GACJN,KAAM,GACNI,OAAQ,IAGK,SAASG,IACtB,IAAMC,GAAWC,EAAAA,EAAAA,MAYjB,OACE,SAAC,KAAD,CACEJ,cAAeA,EACfK,SAbiB,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UACxBC,EAAa,CACjBP,GAAI,KAAOX,IACXK,KAAMW,EAAOX,KACbI,OAAQO,EAAOP,QAEjBI,GAASM,EAAAA,EAAAA,IAAWD,IACpBD,GACD,EAMGG,iBAAkBlB,EAHpB,UAKE,UAAC,KAAD,YACE,UAAC,KAAD,YACE,SAAC,KAAD,CAAOmB,QAAQ,OAAf,mBACA,SAAC,KAAD,CAAOhB,KAAK,OAAOiB,KAAK,OAAOX,GAAG,UAClC,SAAC,KAAD,CAAUN,KAAK,OAAOkB,UAAU,YAGlC,UAAC,KAAD,YACE,SAAC,KAAD,CAAOF,QAAQ,SAAf,qBACA,SAAC,KAAD,CAAOhB,KAAK,SAASiB,KAAK,MAAMX,GAAG,YACnC,SAAC,KAAD,CAAUN,KAAK,SAASkB,UAAU,YAEpC,SAAC,KAAD,CAAKD,KAAK,SAAV,6BAIP,CC/DM,IAAME,EAAiB,SAAAC,GAAK,OAAIA,EAAMC,SAASC,KAAnB,EACnCC,QAAQC,IAAIL,GAEL,IAAMM,EAAgB,SAAAL,GAAK,OAAIA,CAAJ,EAIrBM,EAAqB,SAAAN,GAAK,OAAIA,EAAMO,OAAOC,MAAjB,ECAxB,SAASC,IACtB,IAAMrB,GAAWC,EAAAA,EAAAA,MACXY,GAAWS,EAAAA,EAAAA,IAAYX,GACvBQ,GAASG,EAAAA,EAAAA,IAAYJ,GAU3B,OACE,+BACC,SAAC,KAAD,UARKL,EAASM,QAAO,SAAAI,GAAO,OACzBA,EAAQ/B,KAAKgC,cAAcC,SAASN,EAAOK,cADlB,IASPE,KAAI,YAA2B,IAAxB5B,EAAuB,EAAvBA,GAAIN,EAAmB,EAAnBA,KAAMI,EAAa,EAAbA,OACjC,OAEE,UAAC,KAAD,YACE,SAAC,KAAD,UAAOJ,KACP,SAAC,KAAD,UAAOI,KACP,SAAC,KAAD,CACEa,KAAK,SACLkB,QAAS,kBAAM3B,GAAS4B,EAAAA,EAAAA,IAAc9B,GAA7B,EAFX,sBAHSA,EAWd,OAIR,C,cCrCc,SAAS+B,IACtB,IAAM7B,GAAWC,EAAAA,EAAAA,MAEjB,OACE,UAAC,KAAD,YACE,SAAC,KAAD,CAAaO,QAAQ,SAArB,oCACA,SAAC,KAAD,CACEC,KAAK,OACLjB,KAAK,SACLM,GAAG,SACHgC,QAAS,SAAAC,GAAC,OAAI/B,GAASgC,EAAAA,EAAAA,GAAeD,EAAEE,OAAOC,OAArC,MAIjB,CCRc,SAASC,IACtB,IAAMnC,GAAWC,EAAAA,EAAAA,MACXmC,GAAYd,EAAAA,EAAAA,IAAYL,GAO9B,OANAF,QAAQC,IAAIoB,IAEZC,EAAAA,EAAAA,YAAU,WACRrC,GAASsC,EAAAA,EAAAA,MACV,GAAE,CAACtC,KAGF,+BACE,UAAC,KAAD,YACA,SAACD,EAAD,KACA,SAAC8B,EAAD,KACA,SAACR,EAAD,QAOL,C","sources":["components/Phonebook/Phonebook.jsx","redux/contacts/selectors.js","components/Contacts/Contacts.jsx","components/Filter/Filter.jsx","pages/contacts.js"],"sourcesContent":["import { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { customAlphabet } from 'nanoid';\n\nimport {\n  Btn,\n  ErrorMes,\n  Forma,\n  Input,\n  Label,\n  Wrap,\n} from 'components/PhoneBook.styled';\nimport { useDispatch } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\n\nconst nanoid = customAlphabet('1234567890', 3);\n\nconst schema = Yup.object().shape({\n  name: Yup.string().min(2).max(70).required(),\n  number: Yup.string().min(4).required(),\n});\n\nconst initialValues = {\n  id: '',\n  name: '',\n  number: '',\n};\n\nexport default function Phonebook() {\n  const dispatch = useDispatch();\n\n  const handleSubmit = (values, { resetForm }) => {\n    const newContact = {\n      id: 'id' + nanoid(),\n      name: values.name,\n      number: values.number,\n    };\n    dispatch(addContact(newContact));\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={handleSubmit}\n      validationSchema={schema}\n    >\n      <Forma>\n        <Wrap>\n          <Label htmlFor=\"name\">Name</Label>\n          <Input name=\"name\" type=\"text\" id=\"name\" />\n          <ErrorMes name=\"name\" component=\"div\"></ErrorMes>\n        </Wrap>\n\n        <Wrap>\n          <Label htmlFor=\"number\">Number</Label>\n          <Input name=\"number\" type=\"tel\" id=\"number\" />\n          <ErrorMes name=\"number\" component=\"div\"></ErrorMes>\n        </Wrap>\n        <Btn type=\"submit\">Add contact</Btn>\n      </Forma>\n    </Formik>\n  );\n}\n","export const selectContacts = state => state.contacts.items;\nconsole.log(selectContacts)\n\nexport const selectLoading = state => state;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectStatusFilter = state => state.filter.status;\n","import { BtnDel, Item, List, Name } from 'components/PhoneBook.styled';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport {selectContacts, selectStatusFilter } from 'redux/contacts/selectors';\n\n\n\nexport default function ContactList() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectStatusFilter);\n\n  const filterContacts  = () => {\n   \n   return contacts.filter(contact =>\n        contact.name.toLowerCase().includes(filter.toLowerCase())\n      );\n      \n  };\n \n  return (\n    <>\n     <List>\n        {filterContacts().map(({ id, name, number }) => {\n          return (\n            \n            <Item key={id}>\n              <Name>{name}</Name>\n              <Name>{number}</Name>\n              <BtnDel\n                type=\"button\"\n                onClick={() => dispatch(deleteContact(id))}\n              >\n                Delete\n              </BtnDel>\n            </Item>\n          );\n        })}\n      </List>\n    </>\n  );\n}","import { FilterInput, FilterLabel, WrapFilter } from 'components/PhoneBook.styled';\nimport { useDispatch } from 'react-redux';\nimport  { filterContacts } from 'redux/contacts/filterSlice';\n\nexport default function Filter() {\n  const dispatch = useDispatch();\n  \n  return (\n    <WrapFilter>\n      <FilterLabel htmlFor=\"filter\">Find contacts by name</FilterLabel>\n      <FilterInput\n        type=\"text\"\n        name=\"filter\"\n        id=\"filter\"\n        onInput={e => dispatch(filterContacts(e.target.value))}\n      />\n    </WrapFilter>\n  );\n}\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Phonebook from 'components/Phonebook/Phonebook';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectLoading } from 'redux/contacts/selectors';\nimport ContactList from 'components/Contacts/Contacts';\nimport Filter from 'components/Filter/Filter';\nimport { Container } from 'components/PhoneBook.styled';\n\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectLoading);\n  console.log(isLoading)\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Container>\n      <Phonebook />\n      <Filter />\n      <ContactList />\n      </Container>\n     \n\n      \n    </>\n  );\n}\n"],"names":["nanoid","customAlphabet","schema","Yup","shape","name","min","max","required","number","initialValues","id","Phonebook","dispatch","useDispatch","onSubmit","values","resetForm","newContact","addContact","validationSchema","htmlFor","type","component","selectContacts","state","contacts","items","console","log","selectLoading","selectStatusFilter","filter","status","ContactList","useSelector","contact","toLowerCase","includes","map","onClick","deleteContact","Filter","onInput","e","filterContacts","target","value","Contacts","isLoading","useEffect","fetchContacts"],"sourceRoot":""}